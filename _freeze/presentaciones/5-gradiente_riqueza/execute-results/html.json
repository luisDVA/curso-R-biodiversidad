{
  "hash": "adc30c0b53d2475eb711dcbbe4cfbfe0",
  "result": {
    "markdown": "---\ntitle: \"Patrones geográficos de riqueza de especies\"\nauthor: Fabricio Villalobos & Axel Arango\nformat: revealjs\n---\n\n\n\n## Áreas de distribución y patrones geográficos de riqueza\n\n> \"To do science is to search for repeated patterns, not simply to accumulate facts\" R. MacArthur\n\n\n-   A partir de las distribuciones geográficas de las especies es posible describir y evaluar diferentes patrones de biodiversidad que emergen cuando estudiamos conjuntos de especies (y no a nivel indivual)\n\n## Áreas de distribución y patrones geográficos de riqueza\n\n-   En este ejercicio veremos cómo usar las distribuciones de las especies (polígonos, como los que generamos en el ejercicio anterior) para generar el patrón geográfico de riqueza de especies\n\n-   Usaremos dos paquetes (`letsR` y `epm`) para mostrar diferentes maneras de llegar a lo mismo, considerando paquetes obsoletos (y que pronto se retirarán) y nuevos (que suplen los anteriores)\n\n## \n\nLos datos (polígonos) son de una familia de aves (Passeriformes:Emberizoidae:Icteridae) obtenidos de [BirdLife International](https://www.birdlife.org/)\n\n## Paquetes necesarios:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sp)\nlibrary(letsR)\nlibrary(rgdal)\nlibrary(ggplot2)\nlibrary(viridisLite)\nlibrary(epm)\nlibrary(sf)\nlibrary(tmap)\nlibrary(here)\n```\n:::\n\n\n# letsR (Vilela & Villalobos 2015 MEE)\n\n## \n\nCargar los polígonos de las especies de interés (shapefiles en su carpeta de trabajo)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nicteri_maps <- readOGR(here(\"data\",\"icteridae_maps\",\"icteridae_maps.shp\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOGR data source with driver: ESRI Shapefile \nSource: \"/home/luisd/Dropbox/darcyDB/PDRF/curso-R-biodiversidad/data/icteridae_maps/icteridae_maps.shp\", layer: \"icteridae_maps\"\nwith 190 features\nIt has 26 fields\n```\n:::\n:::\n\n\n. . .\n\nConocer el dominio (\"extent\") de los datos, para usarlo después en la delimitación del espacio (geográfico) de trabajo\n\n\n::: {.cell}\n\n```{.r .cell-code}\nicteri_maps@bbox\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         min       max\nx -166.19269 -34.79010\ny  -55.98218  69.60669\n```\n:::\n:::\n\n\n\n## \n\nCrear una matriz de presencia-ausencia a partir de los polígonos\n\n\n::: {.cell}\n\n```{.r .cell-code}\nicteri.pam <- lets.presab(icteri_maps, xmn = -167,xmx = -35, ymn = -56, ymx = 70, resol=1)\n```\n:::\n\n\n## ¿Cómo se ve el patrón geográfico?\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(icteri.pam)\n```\n\n::: {.cell-output-display}\n![](5-gradiente_riqueza_files/figure-revealjs/unnamed-chunk-5-1.png){width=960}\n:::\n:::\n\n\n## \n\n¿Qué tiene el objeto que se graficó?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nicteri.pam$Richness_Raster\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nclass      : RasterLayer \ndimensions : 126, 132, 16632  (nrow, ncol, ncell)\nresolution : 1, 1  (x, y)\nextent     : -167, -35, -56, 70  (xmin, xmax, ymin, ymax)\ncrs        : +proj=longlat +datum=WGS84 +no_defs \nsource     : memory\nnames      : layer \nvalues     : 0, 18  (min, max)\n```\n:::\n:::\n\n\n## \n\nVamos a verlo en `ggplot`\n\n. . .\n\nPrimero, convertimos el raster en un `data.frame`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrdf <- as.data.frame(icteri.pam$Richness_Raster, xy=TRUE) #Convert raster to data.frame\nnames(rdf)[3] <- 'richness' #Name value column\nhead(rdf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       x    y richness\n1 -166.5 69.5        0\n2 -165.5 69.5        0\n3 -164.5 69.5        0\n4 -163.5 69.5        0\n5 -162.5 69.5        0\n6 -161.5 69.5        0\n```\n:::\n\n```{.r .cell-code}\nrdf2 <- rdf\nrdf2[,3] <- ifelse(rdf[,3]==0,NA,rdf[,3])\nhead(rdf2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       x    y richness\n1 -166.5 69.5       NA\n2 -165.5 69.5       NA\n3 -164.5 69.5       NA\n4 -163.5 69.5       NA\n5 -162.5 69.5       NA\n6 -161.5 69.5       NA\n```\n:::\n:::\n\n\n## \n\nAhora sí, lo graficamos\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = rdf2)+\n  geom_raster(mapping=aes(x=x, y=y, fill=richness))+\n  scale_fill_gradientn(colours= rev(inferno(10)), name='Richness')\n```\n\n::: {.cell-output-display}\n![](5-gradiente_riqueza_files/figure-revealjs/unnamed-chunk-8-1.png){width=960}\n:::\n:::\n\n\n# EcoPhyloMapper - epm (Title et al. 2022 MEE)\n\n## \n\nCargar nuevamente los polígonos, pero ahora con el paquete 'nuevo' y recomendado a partir de junio 2023! (sf)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nicteri_file <- here(\"data\",\"icteridae_maps\",\"icteridae_maps.shp\")\nicteri_maps.sf <- st_read(icteri_file, stringsAsFactors = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `icteridae_maps' from data source \n  `/home/luisd/Dropbox/darcyDB/PDRF/curso-R-biodiversidad/data/icteridae_maps/icteridae_maps.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 190 features and 26 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -166.1927 ymin: -55.98218 xmax: -34.7901 ymax: 69.60669\nGeodetic CRS:  GCS_unknown\n```\n:::\n:::\n\n\n. . .\n\nChecar que la columna de especies (en este caso: SCINAME) sea de caracteres (para evitar problemas más adelante)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(icteri_maps.sf$SCINAME)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n\n##\n\nCrear un vector con los nombres de todas las especies en el multipoligono\n\n\n::: {.cell}\n\n```{.r .cell-code}\nallspp <- unique(icteri_maps.sf$SCINAME)\n```\n:::\n\n\n## \n\nCreamos polígonos individuales por especie\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspList <- vector('list', length(allspp))\nnames(spList) <- allspp\n\nfor (i in 1:length(allspp)) {\n  ind <- which(icteri_maps.sf$SCINAME == allspp[i])\n  spList[[i]] <- icteri_maps.sf[ind,]\n}\n```\n:::\n\n\n. . .\n\nChecamos la geometría de los polígonos e intentamos corregirla si es necesario\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (i in 1:length(spList)) {\n   \tif (!any(st_is_valid(spList[[i]]))) {\n     \t\tmessage('\\trepairing poly ', i)\n     \t\tspList[[i]] <- st_make_valid(spList[[i]])\n     \t}\n   }\n```\n:::\n\n\n## \n\nAhora sí, creamos el gradiente de riqueza con el paquete epm\n\n\n::: {.cell}\n\n```{.r .cell-code}\nicteriEPM <- createEPMgrid(spList, resolution = 1, retainSmallRanges = TRUE, extent = 'auto', method = 'percentOverlap', cellType = 'square', percentThreshold = 0.1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |=======================                                               |  33%\n  |                                                                            \n  |===============================================                       |  67%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n:::\n\n\n\n\n## ¿Qué tiene el objeto generado?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nicteriEPM\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tSummary of epm object:\n\n\tmetric: spRichness \n\tgrid type:  square \n\tnumber of grid cells: 16764 \n\tgrid resolution: 1 by 1 \n\tprojected: FALSE \n\tcrs: +proj=longlat +datum=WGS84 +no_defs \n\n\tnumber of unique species: 99 (richness range: 1 - 21) \n\tdata present: No \n\tphylogeny present: No \n```\n:::\n:::\n\n\n## \n\nLo graficamos\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(icteriEPM)\n```\n\n::: {.cell-output-display}\n![](5-gradiente_riqueza_files/figure-revealjs/unnamed-chunk-16-1.png){width=960}\n:::\n:::\n\n\n## \n\nAhora generamos la matriz de presencia-ausencia a partir del objeto creado. Esta matriz nos puede servir para comparar con los resultados de `letsR` o para derivar otras métricas/patrones\n\n\n::: {.cell}\n\n```{.r .cell-code}\nicteri.pamEPM <- epmToPhyloComm(icteriEPM, sites = 'all')\n```\n:::\n",
    "supporting": [
      "5-gradiente_riqueza_files/figure-revealjs"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}